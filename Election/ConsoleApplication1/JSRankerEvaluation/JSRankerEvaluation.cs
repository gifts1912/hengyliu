//JSRankerEvaluation.exe -e {in:ExtractionTSV|ExtractionGZ:Extraction} -r {in:GenericTSV:JS Ranker} -o {out:ExtractionGZ:Output Extraction} -l {out:GenericTSV:Log} -s (EvaluationScore Col:default,Score) -p (DocumentPosition Col:default,DocumentPosition) -q (RawQuery Col:default,m:Query) [-TitleCol (Title Col)] [-SnippetCol (Snippet Col)] [-MarketCol (Market Col)] [-DisplayUrlCol (DisplayUrl Col)] [-TierCol (Tier Col)] [-L2ScoreCol (L2Score Col)] [-AlteredQueryCol (AlteredQuery Col)] [-AugmentedQueryCol (AugmentedQuery Col)] [-NormalizedQueryCol (NormalizedQuery Col)] [-NormalizedRawQueryCol (NormalizedRawQuery Col)] [(Other Options)]
//Description: Input1: offline extraction file. Input2: JS ranker. Output1: an extraction with an additional evaluation score column ("Score" by default). Input2: per query log file. (Generated by "LogDebug" in ranker. The line break is converted to "\n" to make sure one line per query.) The different query types and other details could be found in the wiki: https://www.bingwiki.com/JavaScript_Ranker_for_Reranking
//Todo: 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.TMSN.CommandLine;
using TSVUtility;
using YLUtility;

namespace JSRankerEvaluation
{

    class ProgramArguments : CmdOptions
    {
        [Argument(ArgumentType.Required, ShortName = "e")]
        public string Extraction;
        [Argument(ArgumentType.Required, ShortName = "r")]
        public string Ranker;
        [Argument(ArgumentType.Required, ShortName = "o")]
        public string OutputExtraction;
        [Argument(ArgumentType.Required, ShortName = "l")]
        public string Log;

        [Argument(ArgumentType.Required, ShortName = "p")]
        public string DocumentPositionCol;
        [Argument(ArgumentType.Required, ShortName = "q")]
        public string RawQueryCol;
        [Argument(ArgumentType.Required, ShortName = "s")]
        public string EvaluationScoreCol;


        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string TitleCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string SnippetCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string MarketCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string DisplayUrlCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string AugmentedQueryCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string TierCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string NormalizedQueryCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string NormalizedRawQueryCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string AlteredQueryCol;
        [Argument(ArgumentType.AtMostOnce, DefaultValue = "")]
        public string L2ScoreCol;
        [Argument(ArgumentType.AtMostOnce, ShortName = "c", DefaultValue = 1000)]
        public int QueryCntInterval;

    }

    class JSRankerEvaluation
    {

        static void Main(string[] args)
        {
            var zipOutput = true;
            if (args.Length == 0)
            {
                zipOutput = false;
                args = "-e Input.tsv.gz -r MSElectionJSRanker.tsv -o out.tsv -l log.tsv -p DocumentPosition -q m:Query -s Score"
                    //args = "-e input.tsv -r ranker1.js -o output.tsv -l log.tsv -p DocumentPosition -q m:Query -s EvaluationScore -AugmentedQueryCol m:AugmentedQuery"
                    //args = "-e SE.gz -r SE.js -o output.tsv -l log.tsv -s Score -p DocumentPosition -q m:Query -TitleCol m:ScrapeTitle -SnippetCol m:ScrapeSnippet  -DisplayUrlCol m:Url -AugmentedQueryCol m:CanonicalQuery -c 1"
                    //args = "-e SE.gz -r SE.js -o output.tsv -l log.tsv -s Score -p DocumentPosition -q m:Query -TitleCol m:ScrapeTitle -SnippetCol m:ScrapeSnippet  -DisplayUrlCol m:Url -AugmentedQueryCol m:CanonicalQuery -c 1"
                    //args = "-e ExtractionTest.gz -r merge.js.bak -o output.tsv -l log.tsv -s Score -p DocumentPosition -q m:Query -TitleCol m:ScrapeTitle -SnippetCol m:ScrapeSnippet  -DisplayUrlCol m:Url -AugmentedQueryCol m:CanonicalQuery -c 1"
                    //args= "-e input.tsv -r ErrorTest.js -o O1.tsv -l log.tsv -p DocumentPosition -q m:Query -s Score"
                    .SplitCommandLine().ToArray();
            }

            var pa = new ProgramArguments();
            if (!Parser.ParseArgumentsWithUsage(args, pa))
            {
                throw new Exception("Commandline syntax error.");
            }


            InitializeJavascriptRerankerSystem();
            var jsHandle = CreateJavaScriptRerankerHandle(pa.Ranker);
            if (jsHandle == IntPtr.Zero)
                throw new Exception("CreateJavaScriptRerankerHandle error!");
            var externalFeatures = GetFeaturesFromRanker(pa.Ranker);

            using (var sr = new StreamReader(TSVFile.OpenInputTSVStream(pa.Extraction)))
            using (var extractionWriter = new StreamWriter(TSVFile.OpenOutputTSVStream(pa.OutputExtraction + "_temp", zipOutput)))
            using (var logWriter = new StreamWriter(TSVFile.OpenOutputTSVStream(pa.Log + "_temp", false)))
            {

                var reader = new TSVReader(sr, true);
                extractionWriter.WriteLine(string.Format("{0}\t{1}", pa.EvaluationScoreCol, reader.GetHeaderLine()));
                logWriter.WriteLine(string.Format("m:QueryId\t{0}\tm:Log", pa.RawQueryCol));

                var xinis =
                    reader.GetColumns()
                        .Select(x => Regex.Match(x, @"^Xini_(\d+)$"))
                        .Where(x => x.Success)
                        .Select(x => new { str = x.Groups[0].Value, i = uint.Parse(x.Groups[1].Value) })
                        .ToList();

                var markers =
                    reader.GetColumns()
                        .Select(x => Regex.Match(x, @"^Marker_(\d+)$"))
                        .Where(x => x.Success)
                        .Select(x => new { str = x.Groups[0].Value, i = uint.Parse(x.Groups[1].Value) })
                        .ToList();


                var qbReader = new QueryBlockReader(reader);
                var cnt = 0;
                foreach (var queryBlock in qbReader.ReadQueryBlocks())
                {
                    var firstTSVLine = queryBlock.Lines[0];
                    var rawQuery = firstTSVLine.GetFeatureValueString(pa.RawQueryCol);
                    var queryIdInfo = string.Format("m:QueryId: <{0}>, Query: <{1}>", queryBlock.QueryId, rawQuery);
                    cnt++;
                    if (cnt % pa.QueryCntInterval == 0)
                        Console.WriteLine(string.Format("Processing Count:{0} {1}", cnt, queryIdInfo));
                    var documentCnt = queryBlock.Lines.Select(x => x.GetFeatureValue(pa.DocumentPositionCol)).Max() + 1;
                    if (queryBlock.Lines.Count > documentCnt)
                        throw new Exception(string.Format("There are docs with duplicated {0} values for {1}", pa.DocumentPositionCol, queryIdInfo));

                    var evalHandle = CreateEvaluationTargetHandle(
                        jsHandle,
                        documentCnt,
                        pa.MarketCol == "" ? "" : firstTSVLine.GetFeatureValueString(pa.MarketCol),
                        pa.AugmentedQueryCol == "" ? "" : firstTSVLine.GetFeatureValueString(pa.AugmentedQueryCol),
                        pa.NormalizedQueryCol == "" ? "" : firstTSVLine.GetFeatureValueString(pa.NormalizedQueryCol),
                        pa.NormalizedRawQueryCol == "" ? "" : firstTSVLine.GetFeatureValueString(pa.NormalizedRawQueryCol),
                        rawQuery,
                        pa.AlteredQueryCol == "" ? "" : firstTSVLine.GetFeatureValueString(pa.AlteredQueryCol)
                        );
                    if (evalHandle == IntPtr.Zero)
                        throw new Exception(string.Format("CreateEvaluationTargetHandle error for {0}", queryIdInfo));

                    foreach (var tsvLine in queryBlock.Lines)
                    {
                        var docIdx = tsvLine.GetFeatureValue(pa.DocumentPositionCol);
                        foreach (var feature in externalFeatures)
                        {
                            SetFeatureValueUInt32(evalHandle, docIdx, feature, tsvLine.GetFeatureValue(feature));
                        }
                        foreach (var xini in xinis)
                        {
                            var score = tsvLine.GetFeatureValueString(xini.str).ParseDoubleOrDefault();
                            SetDocumentXini(evalHandle, docIdx, xini.i, (float)score);
                        }
                        foreach (var marker in markers)
                        {
                            var score = tsvLine.GetFeatureValueString(marker.str).ParseIntOrDefault();
                            SetDocumentMarker(evalHandle, docIdx, marker.i, (uint)score);
                        }

                        SetDocumentUrl(evalHandle, docIdx, tsvLine.GetFeatureValueString("m:Url"));
                        if (pa.TitleCol != "")
                            SetDocumentTitle(evalHandle, docIdx, tsvLine.GetFeatureValueString(pa.TitleCol));
                        if (pa.SnippetCol != "")
                            SetDocumentSnippet(evalHandle, docIdx, tsvLine.GetFeatureValueString(pa.SnippetCol));
                        if (pa.DisplayUrlCol != "")
                            SetDocumentDisplayUrl(evalHandle, docIdx, tsvLine.GetFeatureValueString(pa.DisplayUrlCol));
                        if (pa.TierCol != "")
                            SetDocumentTier(evalHandle, docIdx, tsvLine.GetFeatureValueString(pa.TierCol));
                        if (pa.L2ScoreCol != "")
                            SetDocumentL2Score(evalHandle, docIdx, tsvLine.GetFeatureValueString(pa.L2ScoreCol).ParseDoubleOrDefault());
                    }

                    //Evaluate.
                    var errorMessageSB = new StringBuilder(MaxInfoLength);
                    JavascriptEvaluate(jsHandle, evalHandle, errorMessageSB, MaxInfoLength);
                    var errorMessage = errorMessageSB.ToString();
                    if (errorMessage.Length != 0)
                        throw new Exception(string.Format(@"JS evalution failed:{0}", errorMessage));

                    foreach (var tsvLine in queryBlock.Lines)
                    {
                        var docIdx = tsvLine.GetFeatureValue(pa.DocumentPositionCol);
                        var score = GetJsDocumentScore(evalHandle, docIdx);
                        extractionWriter.WriteLine(string.Format("{0}\t{1}", score, tsvLine.GetWholeLineString()));
                    }

                    var logInfoSB = new StringBuilder(MaxInfoLength);
                    GetJsLogDebugInfo(evalHandle, logInfoSB, MaxInfoLength);
                    var logInfo = logInfoSB.ToString().Replace("\r", "").Replace("\n", "\\n");
                  /*  logWriter.WriteLine(string.Join("\t", new[]
					{
						queryBlock.QueryId,
						rawQuery,
						logInfo
					}));
                    */

                }
            }
            Utility.RenameTempFile(pa.OutputExtraction);
            Utility.RenameTempFile(pa.Log);

        }

        public static List<string> GetFeaturesFromRanker(string path)
        {
            var regex = new Regex(@"//\s*\d+\s*:\s*(\w+)$");
            return File.ReadLines(path)
                .Select(x => x.Trim())
                .TakeWhile(x => x.StartsWith("//"))
                .Select(x => regex.Match(x))
                .Where(x => x.Success)
                .Select(x => x.Groups[1].Value)
                .ToList()
                ;
        }



        static void Main2(string[] args)
        {

            InitializeJavascriptRerankerSystem();
            var jsHandle = CreateJavaScriptRerankerHandle(@"ranker1.js");
            Assert(jsHandle != IntPtr.Zero);
            var evalHandle = CreateEvaluationTargetHandle(
                jsHandle,
                5,
                "en-US",
                "augmented query addquery:PersonName{donald trump } addquery:MSLocationIntentEntity{trump } [qlf$1:3]",
                "normalized query",
                "normalized raw query",
                "raw query",
                "altered query"
                );
            Assert(evalHandle != IntPtr.Zero);

            // Set 0th doc.
            SetDocumentTier(evalHandle, 0, "superfreshbw");
            SetFeatureValueUInt32(evalHandle, 0, "DRScore", 5);
            SetFeatureValueUInt32(evalHandle, 0, "QueryLevelFeature_0", 10);
            SetDocumentUrl(evalHandle, 0, "0.com");
            SetDocumentTitle(evalHandle, 0, "0");
            SetDocumentSnippet(evalHandle, 0, "s0");
            SetDocumentL2Score(evalHandle, 0, 0.00);
            SetDocumentXini(evalHandle, 0, 4, 3.0f);
            SetDocumentMarker(evalHandle, 0, 4, 5u);

            // Set 1st doc.
            SetDocumentTier(evalHandle, 1, "webprecision");
            SetFeatureValueUInt32(evalHandle, 1, "DRScore", 4);
            SetFeatureValueUInt32(evalHandle, 1, "QueryLevelFeature_0", 9);
            SetDocumentUrl(evalHandle, 1, "1.com");
            SetDocumentTitle(evalHandle, 1, "1");
            SetDocumentSnippet(evalHandle, 1, "s1");
            SetDocumentL2Score(evalHandle, 1, 0.01);

            //Evaluate.
            var errorMessageSB = new StringBuilder(MaxInfoLength);
            JavascriptEvaluate(jsHandle, evalHandle, errorMessageSB, MaxInfoLength);
            var errorMessage = errorMessageSB.ToString();
            if (errorMessage.Length != 0)
                throw new Exception(string.Format(@"JS evalution failed:{0}", errorMessage));

            // Verify.
            var score0 = GetJsDocumentScore(evalHandle, 0);

            var logInfoSB = new StringBuilder(MaxInfoLength);
            GetJsLogDebugInfo(evalHandle, logInfoSB, MaxInfoLength);
            var logInfo = logInfoSB.ToString();
            File.WriteAllText("Log.tsv", logInfo);
            //Assert(logInfoSB.ToString()== "raw query\t0.com\t10\t1.com\t1040000\t2.com\t8\t3.com\t1020000\t4.com\t1010000");

            ReleaseEvaluationTargetHandle(evalHandle);
            ReleaseJavascriptRerankerHandle(jsHandle);


            Console.ReadLine();
        }

        public static void Assert(bool condition)
        {
            if (!condition)
                throw new Exception("Customized Assert Failed!");
        }

        #region JS ranekr import

        public const string JsDllPath = @"javascriptrerankerdll.dll";
        public const int MaxInfoLength = 10240;

        [DllImport(JsDllPath)]
        public static extern IntPtr CreateJavaScriptRerankerHandle(string p_jsrankerAbsolutePath);

        [DllImport(JsDllPath)]
        public static extern void InitializeJavascriptRerankerSystem();
        [DllImport(JsDllPath)]
        public static extern void UninitializeJavascriptRerankerSystem();
        [DllImport(JsDllPath)]
        public static extern void ReleaseJavascriptRerankerHandle(IntPtr JavascriptRerankerHandle);
        [DllImport(JsDllPath)]
        public static extern void ReleaseEvaluationTargetHandle(IntPtr EvaluationTargetHandle);

        [DllImport(JsDllPath)]
        public static extern IntPtr CreateEvaluationTargetHandle(IntPtr p_javascriptRerankerHandle, uint p_documentCount, string p_market, string p_augmentedQuery, string p_normalizedQuery, string p_normalizedRawQuery, string p_rawQuery, string p_alteredQuery);

        [DllImport(JsDllPath)]
        public static extern void SetDocumentTier(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_tier);

        // For FLOAT features this will apply (100 + p_value) * 10000.
        [DllImport(JsDllPath)]
        public static extern bool SetFeatureValue(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_featureName, double p_value);

        // This will set the p_value directly to the feature value without any transformation.
        [DllImport(JsDllPath)]
        public static extern bool SetFeatureValueUInt32(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_featureName, uint p_value);


        [DllImport(JsDllPath)]
        public static extern void SetDocumentL2Score(IntPtr EvaluationTargetHandle, uint p_docIndex, double p_l2Score);

        [DllImport(JsDllPath)]
        public static extern void JavascriptEvaluate(IntPtr JavascriptRerankerHandle, IntPtr EvaluationTargetHandle, StringBuilder errorMessage, int p_errorMaxLength);

        [DllImport(JsDllPath)]
        public static extern double GetJsDocumentScore(IntPtr EvaluationTargetHandle, uint p_docIndex);

        [DllImport(JsDllPath)]
        public static extern void SetDocumentTitle(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_title);
        [DllImport(JsDllPath)]
        public static extern void SetDocumentSnippet(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_snippet);
        [DllImport(JsDllPath)]
        public static extern void SetDocumentUrl(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_url);
        [DllImport(JsDllPath)]
        public static extern void SetDocumentDisplayUrl(IntPtr EvaluationTargetHandle, uint p_docIndex, string p_displayUrl);
        [DllImport(JsDllPath)]
        public static extern void SetDocumentXini(IntPtr EvaluationTargetHandle, uint p_docIndex, uint p_xiniIndex, float p_xiniValue);
        [DllImport(JsDllPath)]
        public static extern void SetDocumentMarker(IntPtr EvaluationTargetHandle, uint p_docIndex, uint p_markerIndex, uint p_markerValue);
        [DllImport(JsDllPath)]
        public static extern void GetJsLogDebugInfo(IntPtr EvaluationTargetHandle, StringBuilder p_logInfo, int p_logInfoMaxLength);

        #endregion

    }
}
